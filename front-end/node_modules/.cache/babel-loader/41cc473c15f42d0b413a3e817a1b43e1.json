{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rishabh\\\\Desktop\\\\babel1\\\\react\\\\project\\\\hotel\\\\front-end\\\\src\\\\components\\\\searched_list.jsx\";\nimport React, { Component } from 'react';\nimport getRooms from '../api_calls/getRooms';\nimport { throwStatement } from '@babel/types';\nimport { Switch, Route, Link, useRouteMatch } from 'react-router-dom';\nimport './../searchedList.css';\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n    console.log('contructor', this.props); // const{longitude,latitude} = this.props.location.state.bbox[0];\n\n    this.state = {\n      show_list: false,\n      dest: null\n    };\n  }\n  /*this method is now unsafe_componentWillRecieveProps , and in next update it will be removed so use getDerivedStateFromProps\r\n   componentWillReceiveProps(new_props) // during update component life cycle =  componentWillReceiveProps -> shouldComponentUpdate ->(if true from scu) componentWillUpdate -> render -> componentDidUpdate\r\n   {\r\n       if(this.page_loaded){\r\n           this.loadHotels();\r\n       }\r\n   }\r\n   */\n  // static method so this keyword cannot be used so props and state are send as arguments\n  // and to setState return new state obj , or null if don't want to update state \n\n\n  static getDerivedStateFromProps(props, state) {\n    // eh har var chalda after constructor and without constructor when new props arrives(update) \n    console.log(props);\n    if (!props.location.state.destination) return null;\n    const dest = props.location.state.destination[0];\n\n    if (state.dest.dest_id !== dest.dest_id) {\n      console.log('rerender');\n      return {\n        dest: props.location.state.destination,\n        needUpdate: true\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate() {\n    console.log(\"component update lalala , need update = \".concat(this.state.needUpdate));\n\n    if (this.state.needUpdate) {\n      this.setState({\n        needUpdate: false\n      });\n      this.loadHotels(); //fetch nal jo changes ho rhe ne oh detect nhi krda\n      //when we search and are already on /search\n    }\n  }\n\n  loadHotels() {\n    // console.log(this.props.location);\n    // let longitude = -0.127634, latitude = 51.507391;\n    // if (false && this.props.location.search.bbox_list) {\n    //     longitude = this.state.longitude;//this.props.search.bbox_list[0].longitude;// -0.127634;\n    //     latitude = this.state.latitude;//this.props.search.bbox_list[0].latitude;// 51.507391;\n    // }\n    // let {longitude,latitude} = this.state;\n    // console.log(longitude, latitude);\n    console.log('load hotels');\n    const dest = this.state.dest;\n    getRooms(dest).then(list => {\n      if (list) {\n        console.log(list);\n        this.setState({\n          show_list: true,\n          hotels: list\n        });\n      }\n    }); // this.setState({ page_loaded: true });\n  }\n\n  componentDidMount() {\n    console.log('inside componentdidmount');\n    this.loadHotels(); //nhi thik a , eh sirf ik var hi chalda\n  }\n\n  render() {\n    // let { path, url } = useRouteMatch();// path used in Route , url used in link(matched)\n    // let path = '/search';\n    // let url = '/search';\n    let list;\n\n    if (this.state.show_list) {\n      list = this.state.hotels.map((x, index) => {\n        return React.createElement(Link, {\n          to: {\n            pathname: \"search/hotel/\".concat(x.id),\n            state: {\n              hotel: x\n            }\n          },\n          style: {\n            textDecoration: 'none'\n          },\n          className: \"row hotelLink\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-3\",\n          style: {\n            paddingTop: \"25%\",\n            backgroundColor: \"grey\",\n            border: \"1px solid black\",\n            overflow: \"hidden\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          style: {\n            position: \"absolute\",\n            top: \"0px\",\n            left: \"0px\",\n            width: \"100%\",\n            height: \"100%\",\n            objectFit: \"cover\"\n          },\n          src: x.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"col-8\",\n          style: {\n            paddingLeft: \"30px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row hotelHeading\",\n          style: {\n            fontSize: \"3vw\",\n            fontWeight: \"500\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, x.name), React.createElement(\"div\", {\n          className: \"row\",\n          style: {\n            fontSize: \"2vw\",\n            fontWeight: \"400\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, x.address + \",\" + x.city + \",\" + x.country)));\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, list);\n    {\n      /* routing after /search no need of ReactRouter parent kol a */\n    }\n    {\n      /* <Switch>\r\n             <Route path={`/search/room`}>\r\n                 <Room />\r\n             </Route>\r\n         </Switch> */\n    }\n  }\n\n}\n\nexport default List;","map":{"version":3,"sources":["C:/Users/Rishabh/Desktop/babel1/react/project/hotel/front-end/src/components/searched_list.jsx"],"names":["React","Component","getRooms","throwStatement","Switch","Route","Link","useRouteMatch","List","constructor","props","console","log","state","show_list","dest","getDerivedStateFromProps","location","destination","dest_id","needUpdate","componentDidUpdate","setState","loadHotels","then","list","hotels","componentDidMount","render","map","x","index","pathname","id","hotel","textDecoration","paddingTop","backgroundColor","border","overflow","position","top","left","width","height","objectFit","image","paddingLeft","fontSize","fontWeight","name","address","city","country"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport getRooms from '../api_calls/getRooms';\r\nimport { throwStatement } from '@babel/types';\r\nimport { Switch, Route, Link, useRouteMatch } from 'react-router-dom'\r\nimport './../searchedList.css'\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log('contructor',this.props);\r\n        // const{longitude,latitude} = this.props.location.state.bbox[0];\r\n        this.state = {\r\n            show_list: false,\r\n            dest: null\r\n        }\r\n    }\r\n    /*this method is now unsafe_componentWillRecieveProps , and in next update it will be removed so use getDerivedStateFromProps\r\n     componentWillReceiveProps(new_props) // during update component life cycle =  componentWillReceiveProps -> shouldComponentUpdate ->(if true from scu) componentWillUpdate -> render -> componentDidUpdate\r\n     {\r\n         if(this.page_loaded){\r\n             this.loadHotels();\r\n         }\r\n     }\r\n     */\r\n\r\n    // static method so this keyword cannot be used so props and state are send as arguments\r\n    // and to setState return new state obj , or null if don't want to update state \r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        // eh har var chalda after constructor and without constructor when new props arrives(update) \r\n\r\n        console.log(props);\r\n\r\n        if(!props.location.state.destination)\r\n            return null;\r\n        const dest = props.location.state.destination[0];\r\n        if(state.dest.dest_id !== dest.dest_id)\r\n        {\r\n            \r\n            console.log('rerender');\r\n            return {\r\n                dest: props.location.state.destination,\r\n                needUpdate: true\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    componentDidUpdate() {\r\n        console.log(`component update lalala , need update = ${this.state.needUpdate}`);\r\n        if (this.state.needUpdate) {\r\n            this.setState({ needUpdate: false });\r\n            this.loadHotels();//fetch nal jo changes ho rhe ne oh detect nhi krda\r\n            //when we search and are already on /search\r\n        }\r\n    }\r\n    loadHotels() {\r\n        // console.log(this.props.location);\r\n        // let longitude = -0.127634, latitude = 51.507391;\r\n        // if (false && this.props.location.search.bbox_list) {\r\n        //     longitude = this.state.longitude;//this.props.search.bbox_list[0].longitude;// -0.127634;\r\n        //     latitude = this.state.latitude;//this.props.search.bbox_list[0].latitude;// 51.507391;\r\n        // }\r\n        // let {longitude,latitude} = this.state;\r\n        // console.log(longitude, latitude);\r\n        \r\n        console.log('load hotels');\r\n        const { dest } = this.state;\r\n        getRooms(dest)\r\n            .then((list) => {\r\n                if (list) {\r\n                    console.log(list);\r\n                    this.setState({ show_list: true, hotels: list });\r\n                }\r\n            })\r\n        // this.setState({ page_loaded: true });\r\n    }\r\n    componentDidMount() {\r\n        console.log('inside componentdidmount');\r\n        this.loadHotels();\r\n        //nhi thik a , eh sirf ik var hi chalda\r\n    }\r\n    render() {\r\n        // let { path, url } = useRouteMatch();// path used in Route , url used in link(matched)\r\n        // let path = '/search';\r\n        // let url = '/search';\r\n\r\n        let list;\r\n        if (this.state.show_list) {\r\n            list = this.state.hotels.map((x, index) => {\r\n                return <Link to={{\r\n                    pathname: `search/hotel/${x.id}`,\r\n                    state: {\r\n                        hotel: x\r\n                    }\r\n                }} style={{ textDecoration: 'none' }} className=\"row hotelLink\" key={index}>\r\n                    <div className=\"col-3\" style={{ paddingTop: \"25%\", backgroundColor: \"grey\", border: \"1px solid black\", overflow: \"hidden\" }}>\r\n                        <img style={{ position: \"absolute\", top: \"0px\", left: \"0px\", width: \"100%\", height: \"100%\", objectFit: \"cover\" }} src={x.image} />\r\n                    </div>\r\n                    <div className=\"col-8\" style={{ paddingLeft: \"30px\" }}>\r\n                        <div className=\"row hotelHeading\" style={{ fontSize: \"3vw\", fontWeight: \"500\" }}>\r\n                            {x.name}\r\n                        </div>\r\n                        <div className=\"row\" style={{ fontSize: \"2vw\", fontWeight: \"400\" }}>\r\n                            {x.address + \",\" + x.city + \",\" + x.country}\r\n                        </div>\r\n                    </div>\r\n                </Link >\r\n            })\r\n        }\r\n        return <div className='container-fluid'>{list}</div>;\r\n\r\n        {/* routing after /search no need of ReactRouter parent kol a */ }\r\n        {/* <Switch>\r\n                <Route path={`/search/room`}>\r\n                    <Room />\r\n                </Route>\r\n            </Switch> */}\r\n\r\n    }\r\n}\r\nexport default List;"]},"metadata":{},"sourceType":"module"}